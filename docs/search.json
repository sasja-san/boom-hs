[
  {
    "objectID": "01_elem.html",
    "href": "01_elem.html",
    "title": "1. Babys First Haskell Functions",
    "section": "",
    "text": "Let’s start with looking at two versions of the same thing. Hopefully this can be a bridge between what you know and the style Haskell uses: Hint: You can click the numbers in the list below and have the corresponding code be highlighted.\nLet’s look at elem:\nSo what’s the type of elem? Run ghci&gt; :t elem and you should get this:\nSmall letters, especially the a correspond to the generic type, like &lt;T&gt; in languages like Java or C++. In this particular case the generic type t (with a restriction Foldable t) represents a structure. So the t could be replaced with List or Set or BinarySearchTree or many other types.\nLet’s simplify this by forcing the Foldable into a list. This gives us:\nNow that’s A LOT better. It says that the element a has to have the Eq trait/interface.1 This means that the functions == and /= has to be defined for a. If it does, then we can search for something of type a in a [a] (“list of a:s”) and we will get back a Bool."
  },
  {
    "objectID": "01_elem.html#tutorial-structure-your-first-function",
    "href": "01_elem.html#tutorial-structure-your-first-function",
    "title": "1. Babys First Haskell Functions",
    "section": "Tutorial Structure / Your First Function",
    "text": "Tutorial Structure / Your First Function\nThis tutorial will asks you to write your own version of existing library functions. In this first instance you will write myElem :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool. So it has the same type as the library one, just my in front of it, to avoid naming conflicts.\n\n\n\n\nBasic ghci usage.\n$ ghci File.hs to initially load a file.\n\nghci&gt; :l File.hs to load the file from within ghci.\n\nDON’T MISS!!!\nghci&gt; :r to reload the file last loaded.\n\nghci&gt; myElem 'b' \"abc\" An expression calling myElem to evaluate in ghci.\n\nCreate a file Exercise.hs which looks like this:\n1import Data.List\n2import Data.Char\n\n3myElem :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool\n4myElem e []     = False\n5myElem e (x:xs) = undefined\n\n1\n\nGet all the list functions available in your terminal.\n\n2\n\nWe will need some extra functions for Char manipulation.\n\n3\n\nDeclaration of the type of the function myElem. All things of type a needs to be able to do ==. It takes an a, a list of a and returns a Bool.\n\n4\n\nThe “base case”. When looking for the element e in an empty list, we won’t find it. So we return False.\n\n5\n\nThis is where you’ll put your recursive call.\n\n\nNow complete the function at the last line. Haskell is quite squeamish about indentation, so you might get a few compilation errors before you get it right.\nHere’s an example of correct indentation for if, which also uses the let-in notation for local variable creation:\n\n\n\n\n\n\n\n\nWriting Conventions\nWhen making “alternate” version of existing values you usually stick a ' at the end. So in this case the string s1 becomes s1', pronounced as [s one prime] (swedish: [prim]). The contents of s1' and s2' is the same as s1 and s2 except that any characters not in lower case has been turned into lower case.\n\nisCoolBeans :: String -&gt; String -&gt; String\nisCoolBeans s1 s2 =\n1  let s1' = map toLower s1\n      s2' = map toLower s2\n2  in if (s1' == \"cool\") && (s2' == \"beans\")\n3      then \"yay!\"\n      else \"not so cool\"\n\n1\n\nYou could place a let on each line declaring a new value, but convention is to just do it on the first line in your declaration block. This block gives you two new values, s1' [s one prime] and s2' who are available to you after the in.\n\n2\n\nThe word in starts the function. When using if you don’t need any special indentation.\n\n3\n\nThe rule here is that then and else has to be indented AND they have to have the exact same level of indentation. Maybe the then clause contains a big let-in expression. That’s perfectly fine, and that will have its own indentation rules. As long as the matching else is at the same level as then, it’ll be fine.\n\n\nghci&gt; isCoolBeans \"COOL\" \"bEaNs\"\n\"yay!\"\n\n\nA big trick in list function syntax is the : in the second argument to the function. Read it as\n\n(x:xs) is a list whose first element is called x and whose tail (rest of the list) is called xs\n\nLet’s now get back to myElem.\nmyElem e (x:xs) = if (e == x)\n  then True\n  else undefined\nThat’s a bit better. Now you check against the first element of the list. But what if the call is elem 'b' \"abc\", then you’ll crash because you used undefined2. Here’s where you have to bring in recursion, so this is the complete function definition:\n2 A magical placeholder word you should learn to use. It mostly means “I’ll solve this later.”myElem :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool\nmyElem e    []  = False\nmyElem e (x:xs) = if (e == x)\n                  then True\n                  else myElem e xs\nIt’s a bit verbose, so given that “or” is defined as this:\n\n\n\n\n\nThe notation _ for an argument means “We are not going to look at this argument when computing the result”.\n(||) :: Bool -&gt; Bool -&gt; Bool\nTrue  || _ = True\nFalse || b = b\nTrying it out in ghci:\nghci&gt; False || (False || False)\nFalse\nghci&gt; False || (False || True)\nTrue\nghci&gt; True || False\nTrue\nghci&gt; True || undefined\nTrue\nLet’s use it for our myElem function!\nmyElem :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool\nmyElem _    []  = False\nmyElem e (x:xs) = (e == x) || myElem e xs"
  },
  {
    "objectID": "01_elem.html#your-new-best-friend",
    "href": "01_elem.html#your-new-best-friend",
    "title": "1. Babys First Haskell Functions",
    "section": "Your New Best Friend",
    "text": "Your New Best Friend\nIf you’ve ever used Python you just put in your expression in the prompt and get the resulting value and side effects (such as file I/O & whatnot).\nHaskell is extremely strict regarding its types. When a Python program will run and crash because of a programmer error, a Haskell program refuses to load in the first place.\nTo look a bit at what’s going on here, in ghci try using the :t command. It asks for the type of an expression. First ask about map:\n  ghci&gt; :t map\nThe part (a -&gt; b) means that the first argument is a function, taking something of type a and returning something of type b.\nNow let’s play with it a bit, try these in ghci:\n  ghci&gt; :t toLower\n  ghci&gt; :t toLower 'A'\n  ghci&gt; toLower 'A'\n  ghci&gt; :t map toLower\nBecause toLower has the type you saw (when running the above commands in ghci), those types gets bound up in map.\n\n\n\n\n\n\n\nUsing :t will be one of your primary tools for learning Haskell."
  },
  {
    "objectID": "01_elem.html#fking-around-with-t---finding-out",
    "href": "01_elem.html#fking-around-with-t---finding-out",
    "title": "1. Babys First Haskell Functions",
    "section": "F**king Around With :t - Finding Out",
    "text": "F**king Around With :t - Finding Out\nFirst let’s look at the function length and then write our own, just to get away from the Foldable nonsense.You could use ghci&gt; :t +d length and that will work to default the Foldable to a list. It will often work, but it’s in no way a sure thing.\nghci&gt; :t length\nlength :: (Foldable t) =&gt; t a -&gt; Int\nNow make your own:\n\nBehaviorImplementation\n\n\nghci&gt; :t myLength\nmyLength :: [a] -&gt; Int\nghci&gt; myLength []\n0\nghci&gt; myLength \"\"\n0\nghci&gt; myLength [1..5]\n5\nghci&gt; myLength \"abc123\"\n6\n\n\nmyLength        :: [a] -&gt; Int\nmyLength    []  = 0\nmyLength (_:xs) = 1 + myLength xs\n\n\n\nAnd also make one that enforces the String type.\n\nBehaviorImplementation\n\n\nghci&gt; :t myStringLength\nmyLength :: String -&gt; Int\nghci&gt; myStringLength \"\"\n0\nghci&gt; myStringLength \"1234\"\n4\nghci&gt; myStringLength [1..5]\n\n&lt;interactive&gt;:76:17: error:\n    • No instance for (Num Char) arising from the literal ‘1’\n    • In the expression: 1\n      In the first argument of ‘myStringLength’, namely ‘[1 .. 4]’\n      In the expression: myStringLength [1 .. 4]\n\n\nmyStringLength    :: String -&gt; Int\nmyStringLength cs = myLength cs\n\n\n\nLet’s look at map again, which in many cases acts as your foreach function.\nghci&gt; :t map\nmap :: (a -&gt; b) -&gt; [a] -&gt; [b]\nNow, BEFORE asking ghci about the type of the below expression, can you figure out what it will be? It’s a matter of search-and-replace with the types that comes from the first argument to map.\n\nQueryAnswer\n\n\nghci&gt; :t map myStringLength\n\n\nmap myStringLength :: [String] -&gt; [Int]\n\n\n\nYou could write a list of strings manually, which is kind of annoying:\n[\"my\", \"list\", \"of\", \"strings\"]\nInstead, try using the function words.\nghci&gt; :t words\nwords :: String -&gt; [String]\nghci&gt; words \"hello everyone reading\"\n[\"hello\",\"everyone\",\"reading\"]\nNow combine map myStringLength with words into something computable. You will need to put parenthenses at the right place for this to work.\n\nNow you have the most basic tools for learning Haskell."
  },
  {
    "objectID": "02_my_funs.html",
    "href": "02_my_funs.html",
    "title": "2. The List of Functions",
    "section": "",
    "text": "Once you’ve gone through the basic tools as part of Part 1 you should have what it takes to complete this.\nIt’s a list of functions, pretty much all from the module Data.List which you should write your own versions of."
  },
  {
    "objectID": "02_my_funs.html#the-list",
    "href": "02_my_funs.html#the-list",
    "title": "2. The List of Functions",
    "section": "The List",
    "text": "The List\nAs mentioned in the previous chapter you should write my-versions of the functions in the list. So when you see that the function name is length you should write myLength in your source file.\nWhen looking at the functions in ghci remember that you can use this, which usually fixes the Foldable thing into a list.\nghci&gt; :t +d elem\n\nelemSource\n\n\nghci&gt; elem 1 [0,2..10]\nFalse\nghci&gt; elem 'b' \"abc\"\nTrue\n\n\nelem :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool\nelem _    []  = False\nelem e (x:xs) = (e == x) || myElem e xs\n\n\n\n\nlengthsource\n\n\nghci&gt; length \"\"\n0\nghci&gt; length []\n0\nghci&gt; length \"hej du glade\"\n12\nghci&gt; length (words \"hej du glade\")\n3\n\n\nlength :: [a] -&gt; Int\nlength    []  = 0\nlength (_:xs) = 1 + myLength xs\n\n\n\n\nnullsource\n\n\nghci&gt; null []\nTrue\nghci&gt; null \"\"\nTrue\nghci&gt; null [1..]\nFalse\nghci&gt; null \"abc\"\nFalse\n\n\nnull             :: [a] -&gt; Bool\nnull []          =  True\nnull (_:_)       =  False\n\n\n\n\nheadsource\n\n\nghci&gt; head [1..]\n1\nghci&gt; head \"abc\"\n'a'\nghci&gt; head []\n*** Exception: Prelude.head: empty list\n\n\nhead             :: [a] -&gt; a\nhead (x:_)       =  x\nhead []          =  error \"Prelude.head: empty list\"\n\n\n\n\ntailsource\n\n\nghci&gt; tail [1..]\n[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,Interrupted.\nghci&gt; tail []\n*** Exception: Prelude.tail: empty list\nghci&gt; tail [42]\n[]\nghci&gt; tail [42, 69]\n[69]\n\n\ntail             :: [a] -&gt; [a]\ntail (_:xs)      =  xs\ntail []          =  error \"Prelude.tail: empty list\"\n\n\n\n\nlastsource\n\n\nghci&gt; last \"abc\"\n'c'\nghci&gt; last []\n*** Exception: Prelude.last: empty list\n\n\nlast             :: [a] -&gt; a\nlast [x]         =  x\nlast (_:xs)      =  last xs\nlast []          =  error \"Prelude.last: empty list\""
  },
  {
    "objectID": "02_my_funs.html#the-maybe-detour",
    "href": "02_my_funs.html#the-maybe-detour",
    "title": "2. The List of Functions",
    "section": "The Maybe Detour",
    "text": "The Maybe Detour\nHaskell has a type called Maybe. It’s one way you could do null values in Haskell, as NULL isn’t exactly a valid value in the language. It’s defined as\n\n\nRead the declaration as\n\nThe datatype Maybe is either Nothing or it’s Just a, were a is some contained data.\n\ndata Maybe a = Nothing | Just a\nSay that you’re trying to read a number from a String, then Maybe is great way to represent your error:\nstrToInt :: String -&gt; Maybe Int\nIf the parsing fails you get Nothing. If the parsing succeeds you get Just x, where x is the number found in the String."
  },
  {
    "objectID": "02_my_funs.html#back-to-the-list",
    "href": "02_my_funs.html#back-to-the-list",
    "title": "2. The List of Functions",
    "section": "Back to the List",
    "text": "Back to the List\n\n\n\n\n\n\n\n\nThis one is a little tricky, so be sure to read the source carefully.\n\nelemIndexsource\n\n\nghci&gt; elemIndex 5 [0..10]\nJust 5\nghci&gt; elemIndex 5 []\nNothing\nghci&gt; elemIndex 5 [6..10]\nNothing\n\n\nelemIndex :: (Eq a) =&gt; a -&gt; [a] -&gt; Maybe Int\nelemIndex e xs = ei 0 e xs\n  where\n    ei :: (Eq a) =&gt; Int -&gt; a -&gt; [a] -&gt; Maybe Int\n    ei ixCount e    []  = Nothing\n    ei ixCount e (x:xs) = if (e == x)\n                        then Just ixCount\n                        else ei (ixCount + 1) e xs\n\n\n\n\ntakesource\n\n\nghci&gt; take 0 \"abc\"\n\"\"\nghci&gt; take 5 \"abc\"\n\"abc\"\nghci&gt; take 2 (words \"foo bar baz\")\n[\"foo\",\"bar\"]\n\n\ntake                   :: Int -&gt; [a] -&gt; [a]\ntake n _      | n &lt;= 0 =  []\ntake _ []              =  []\ntake n (x:xs)          =  x : take (n-1) xs\n\n\n\n\ndropsource\n\n\nghci&gt; drop 0 \"abc\"\n\"abc\"\nghci&gt; drop 5 \"abc\"\n\"\"\nghci&gt; drop 5 [1..10]\n[6,7,8,9,10]\n\n\ndrop                   :: Int -&gt; [a] -&gt; [a]\ndrop n xs     | n &lt;= 0 =  xs\ndrop _ []              =  []\ndrop n (_:xs)          =  drop (n-1) xs\n\n\n\n\nreversesource\n\n\nghci&gt; reverse \"Jesus Christ Superstar\"\n\"ratsrepuS tsirhC suseJ\"\nghci&gt; map reverse (words \"Jesus Christ Superstar\")\n[\"suseJ\",\"tsirhC\",\"ratsrepuS\"]\nghci&gt; unwords (map reverse (words \"Jesus Christ Superstar\"))\n\"suseJ tsirhC ratsrepuS\"\n\n\nreverse :: [a] -&gt; [a]\nreverse xs = rev xs []\n  where\n    rev (x:xs) acc = rev xs (x:acc)\n    rev []     acc = acc\n\n\n\n\n\nThe function unwords used here are for String/[Char] (same thing) only. For a non-Char-based concatenation of lists, look at concat. You should probably implement your own version of concat as well. Use the function (++) :: [a] -&gt; [a] -&gt; [a] in your implementation."
  },
  {
    "objectID": "02_my_funs.html#the-pairing-detour",
    "href": "02_my_funs.html#the-pairing-detour",
    "title": "2. The List of Functions",
    "section": "The Pairing Detour",
    "text": "The Pairing Detour\nIn Haskell there are “pairs” or “tuples”. They are constructed with the (,) operator/function. So\n(,) :: a -&gt; b -&gt; (a,b)\nYou can always construct a pair with paretheses and a comma.\nghci&gt; let i = 123 :: Int\nghci&gt; let p = (i, \"hello\")\nghci&gt; :t p\np :: (Int, String)\nghci&gt; p\n(123,\"hello\")\nThe “tuple” isn’t limited to two elemnts. But when you get up in numbers you really should consider using the data keyword so that your paired up data can have names for each of the fields.\nBut here it is:\nmakeTriple :: a -&gt; b -&gt; c -&gt; (a,b,c)\nmakeTriple x y z = (x,y,z)\nFor un-pairing you use the functions fst and snd. Write your own versions of fst and snd."
  },
  {
    "objectID": "02_my_funs.html#the-list-again",
    "href": "02_my_funs.html#the-list-again",
    "title": "2. The List of Functions",
    "section": "The List, Again",
    "text": "The List, Again\n\nzipsource\n\n\nghci&gt; zip [1,2,3] \"abc\"\n[(1,'a'),(2,'b'),(3,'c')]\nghci&gt; zip [1..] \"xyz\"\n[(1,'x'),(2,'y'),(3,'z')]\nghci&gt; zip [1..] [999999,999998..]\n[(1,999999),(2,999998),(3,999997),(4,999996),(5,999995),(6,999994),(7,999993),(8,99999Interrupted.\n\n\nzip    []      _    = []\nzip     _     []    = []\nzip (x:xs) (y:ys)   = (x,y) : zip xs ys\n\n\n\n\nzipWithsource\n\n\nghci&gt; zipWith (*) [1,2,3] [10, 0, 100]\n[10,0,300]\nghci&gt; zipWith (&gt;) [1,2,3] [10, 0, 100]\n[False,True,False]\n\n\nzipWith :: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]\nzipWith z (a:as) (b:bs) =  (z a b) : (zipWith z as bs)\nzipWith _     _      _  =  []\n\n\n\n\n\n\n\n\n\n\n\nTo grasp this, try using it with :t in many different ways.\nOnce you understand the source for zipWith, rewrite your function myZip by using myZipWith.\n\ntakeWhilesource\n\n\nghci&gt; takeWhile (&lt;3) [1..10]\n[1,2]\n\n\ntakeWhile               :: (a -&gt; Bool) -&gt; [a] -&gt; [a]\ntakeWhile p []          =  []\ntakeWhile p (x:xs) \n            | p x       =  x : takeWhile p xs\n            | otherwise =  []\nUsing | is called a “guard”. It’s a fancier way of doing multiple nested if-else expressions. otherwise is an alias for True.\n\n\n\n\ndropWhilesource\n\n\nghci&gt; dropWhile (&lt;3) [1..10]\n[3,4,5,6,7,8,9,10]\n\n\ndropWhile               :: (a -&gt; Bool) -&gt; [a] -&gt; [a]\ndropWhile p []          =  []\ndropWhile p xs@(x:xs')\n            | p x       =  dropWhile p xs'\n            | otherwise =  xs\nThe syntax with xs@(x:xs') says that you can deal with the whole list by using xs but you have also named the first element as x and the tail of the list as xs'.\n\n\n\n\nfiltersource\n\n\nghci&gt; filter isUpper \"BiG GaZOngaZ\"\n\"BGGZOZ\"\nghci&gt; filter (\\x -&gt; (x `mod` 3) == 0) [1..10]\n[3,6,9]\n\n\nfilter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]\nfilter p []                 = []\nfilter p (x:xs) | p x       = x : filter p xs\n                | otherwise = filter p xs\n\n\n\n\nmapsource\n\n\nghci&gt; map (*2) [1..3]\n[2,4,6]\nghci&gt; let ws = words \"a nice list of words\"\nghci&gt; map reverse ws\n[\"a\",\"ecin\",\"tsil\",\"fo\",\"sdrow\"]\n\n\nmap :: (a -&gt; b) -&gt; [a] -&gt; [b]\nmap _    []  = []\nmap f (x:xs) = f x : map f xs\n\n\n\n\nsumsource\n\n\nghci&gt; sum [1..100]\n5050\n\n\n{- see foldr -}\n\n\n\n\nproductsource\n\n\nghci&gt; product [3,7]\n21\n\n\n{- see foldr -}"
  },
  {
    "objectID": "02_my_funs.html#identity-elements-of-operations",
    "href": "02_my_funs.html#identity-elements-of-operations",
    "title": "2. The List of Functions",
    "section": "Identity Elements of Operations",
    "text": "Identity Elements of Operations\nConsider multiplication or addition. Both operations have an “identity element” i such that it will return the original value when applying the operation:\nx + i_add = x\nx * i_mul = x\nFor addition we have 0 as i_add. For multiplication i_mul is 1."
  },
  {
    "objectID": "02_my_funs.html#the-final-list-functions",
    "href": "02_my_funs.html#the-final-list-functions",
    "title": "2. The List of Functions",
    "section": "The Final List Functions",
    "text": "The Final List Functions\n\nfoldrsource\n\n\nghci&gt; :t foldr\nfoldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b\nghci&gt; let myNewSum = foldr (+) 0\nghci&gt; :t myNewSum\nmyNewSum :: (Num b) =&gt; [b] -&gt; b\nghci&gt; myNewSum [1..100]\n5050\n\n\nfoldr            :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b\nfoldr f z []     =  z\nfoldr f z (x:xs) =  f x (foldr f z xs)\n\n\n\n\nfoldlsource\n\n\nghci&gt; :t foldl\nfoldl :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b\nghci&gt; let myNewProd = foldl (*) 1\nghci&gt; :t myNewProd\nmyNewProd :: )Num a) =&gt; [a] -&gt; a\nghci&gt; myNewProd [3,7]\n21\n\n\nfoldl            :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a\nfoldl f z []     =  z\nfoldl f z (x:xs) =  foldl f (f z x) xs\n\n\n\nFor the remainder you’ll just get the function names which you should implement. You might want to read the section on operators to get some of these right.I’m too lazy to write/dig up sources for all these.\n\nlookup\n(!!) (call it (&lt;!!&gt;) or something)\n(!!=) (see below)\ninsert\ndelete\n(++)\nconcat (calling your own (++))\nconcatMap (inspect with :t +d concatMap)\nrepeat\nreplicate\nintersperse\ncycle\nsplitAt\nspan / break\ngroup\nisPrefixOf\nisSubsequenceOf\n\nAlso write a function which replaces the element at a certain index. It’s usually looks like this:\n(!!=) :: [a] -&gt; (Int, a) -&gt; [a]\nxs !!= (ix, new) = undefined\nBecause Haskell lists are singly linked the access time for this is not very nice, so be careful if you actually use this function."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Boom-HS Starting Page",
    "section": "",
    "text": "This tutorial started as a list of function names on a piece of paper. The people who worked through the list on the paper greatly appreciated it as an introduction.\nThis is intended as a short and simple way for someone who has a bit of programming experience1 to start at the right end of learning Haskell.2\n1 Mostly made for people doing the AI course at Jönköpings Tekniska Högskola (JTH).2 There’s way too many “What is a Monad?” tutorials out there. Don’t even fuck around with those for your first month. It will be a huge waste of your time.To reach basic proficiency you will need to master three things.\n\nThe basic syntax of lists and datatypes.\nUnderstanding and writing function type signatures.\nSome/most of the functions in Prelude and Data.List.\n\nThis tutorial aims to guide you through these with minimal effort."
  },
  {
    "objectID": "index.html#about-this-tutorial",
    "href": "index.html#about-this-tutorial",
    "title": "Boom-HS Starting Page",
    "section": "",
    "text": "This tutorial started as a list of function names on a piece of paper. The people who worked through the list on the paper greatly appreciated it as an introduction.\nThis is intended as a short and simple way for someone who has a bit of programming experience1 to start at the right end of learning Haskell.2\n1 Mostly made for people doing the AI course at Jönköpings Tekniska Högskola (JTH).2 There’s way too many “What is a Monad?” tutorials out there. Don’t even fuck around with those for your first month. It will be a huge waste of your time.To reach basic proficiency you will need to master three things.\n\nThe basic syntax of lists and datatypes.\nUnderstanding and writing function type signatures.\nSome/most of the functions in Prelude and Data.List.\n\nThis tutorial aims to guide you through these with minimal effort."
  },
  {
    "objectID": "index.html#install-ghc",
    "href": "index.html#install-ghc",
    "title": "Boom-HS Starting Page",
    "section": "Install GHC",
    "text": "Install GHC\n\n\nNote On Installing\nUsing your OS’s package manager should be fine for any small school task, but if you ever need a proper install then you should be using the tool ghcup which will manage which version of GHC you install.\nIf you’re having trouble installing GHC, use ghcup.\nIf you have a package manager, preferably use that. It’s around 500 MB. The package name is usually just ghc.\nIf you don’t have one use Stack but that’ll take almost 2 GB.\nIf you’re on Windows then you shouldn’t be using this tutorial. You’re too far outside the programmer culture in general for this to help you. Is there any real chance for you to save your soul? Repent and better your ways.3\n3 Stack has instructions for Windows as well."
  },
  {
    "objectID": "index.html#tutorial-name",
    "href": "index.html#tutorial-name",
    "title": "Boom-HS Starting Page",
    "section": "Tutorial Name",
    "text": "Tutorial Name\n\nHaskell files have the extension .hs. “HS” is also short for something else, as seen in this video. Coincidentally, at the end of the linked video you can see the average student reaction as he tries to learn Haskell."
  },
  {
    "objectID": "03_extra.html",
    "href": "03_extra.html",
    "title": "3. Finishing Up",
    "section": "",
    "text": "Good job working your way through the list!\nHere are some final links, tips and bonus exercises."
  },
  {
    "objectID": "03_extra.html#hoogle",
    "href": "03_extra.html#hoogle",
    "title": "3. Finishing Up",
    "section": "Hoogle",
    "text": "Hoogle\nAs a next step you should look at Hoogle:\n\nhttps://hoogle.haskell.org\nIt’s a great tool for you to search for already existing functions. Try searching for the type of one of the most fundamental Haskell functions:\n(b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c\nOr you could search for something simpler:\n[a] -&gt; [a] -&gt; [a]\nLearning to think about how you want to transform your data on the type level really is key to mastering Haskell."
  },
  {
    "objectID": "03_extra.html#sec-operators",
    "href": "03_extra.html#sec-operators",
    "title": "3. Finishing Up",
    "section": "“Operators” and Lambdas",
    "text": "“Operators” and Lambdas\nIn Haskell operators are functions. This means that + and - are functions just like you would declare your own add.\nThis means that you can declare your own operators, which the text parsing library has taken quite a few liberties when doing, as can be seen in this example from the book Real World Haskell, available for free online:\n-- file: ch16/HttpRequestParser.hs\np_headers :: CharParser st [(String, String)]\np_headers = header `manyTill` crlf\n  where header = liftA2 (,) fieldName (char ':' *&gt; spaces *&gt; contents)\n        contents = liftA2 (++) (many1 notEOL &lt;* crlf)\n                               (continuation &lt;|&gt; pure [])\n        continuation = liftA2 (:) (' ' &lt;$ many1 (oneOf \" \\t\")) contents\n        fieldName = (:) &lt;$&gt; letter &lt;*&gt; many fieldChar\n        fieldChar = letter &lt;|&gt; digit &lt;|&gt; oneOf \"-_\"\n\n\nPRO TIP: Don’t try to understand this piece of code, instead marvel at the seemingly endless onslaught of combining operators.\nLet’s toy around with it a bit, to see how it works. This is three definitions of the same thing.\nsubtractTwo :: Int -&gt; Int\n1subtractTwo x = x - 2\n2subtractTwo = \\x -&gt; x - 2\n3subtractTwo = (- 2)\n\n1\n\nPretty normal implementation.\n\n2\n\nUsing a lambda expression. The ’' is the lambda sign, which declares that x is a named function argument, allowing it to be used to the right side of the -&gt;.\n\n3\n\nPartial application of the (-) function. Had it instead been (2 -) the the partial application of minus would have bound up the left side argument. Still valid, but that’s the function subtractFromTwo.\n\n\nGo wild with :t to understand how this works.\nIf you find an operator you want to implement you can take some inspiration from the Parsec code example above. Say that you want to make your own version of (.)1 then just slam some GT/LT signs around that, to do your own my-operator:\n1 Called “ball” or “ring” or “function composition”. It’s how function applications are chained together with nicer syntax than a bazillion parenthenses. Usually you write p . q . f . g . h $ x, where ($) is another operator that is special in how “hard” it binds/is applied. See below.(&lt;.&gt;) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c\nf &lt;.&gt; g = \\x -&gt; undefined\n\nStupid but Valid Haskell\nghci&gt; let x &lt;╯°□°&gt;╯ y = x + y"
  },
  {
    "objectID": "03_extra.html#next-level-t",
    "href": "03_extra.html#next-level-t",
    "title": "3. Finishing Up",
    "section": "Next Level :t",
    "text": "Next Level :t\nThere’s another command you can do in ghci which is :i for info. The footnote above mentions that ($) is special in how hard it binds. How’s that quantified? If you did :t ($) you probably got nothing. Here’s how you do it instead:\nghci&gt; :i ($)\n($) :: (a -&gt; b) -&gt; a -&gt; b   -- Defined in ‘GHC.Base’\ninfixr 0 $\nghci&gt; :i (.)\n(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c   -- Defined in ‘GHC.Base’\ninfixr 9 .\nThe :i command is also a tool for exploring concepts “higher” than functions, such as datatypes and type classes. If you did :i (+) you noticed it said something about class Num. Try looking at that:\nghci&gt; :i Num\n\n\nIf you do :i Foldable it might make more sense than it would have when you started out.\nIt declares “To be called a Num all these functions must be implemented.” as well as a list of all currently loaded datatypes which implements the Num class.\nYou can even look at the declaration datatypes, such as the list and Maybe!\nghci&gt; :i []\nghci&gt; :i Maybe"
  },
  {
    "objectID": "03_extra.html#bonus-exercises",
    "href": "03_extra.html#bonus-exercises",
    "title": "3. Finishing Up",
    "section": "Bonus Exercises",
    "text": "Bonus Exercises\n\nDifficult List Functions\nWrite your own version of mapAccumL.\nBuilding on that, a final, quite difficult exercise:\n\nfactorialPairssource\n\n\nMake a function (constant) which is a list of all numbers and the factorial of them. So all pairs \\((n, n!)\\) in one big list.\nfactorialPairs :: [(Integer, Integer)]\nTake a close look at the mapAccum functions. The s in the type signature is for “State”. One great use would be to take list [1..] and use mapAccumL (will only work with the L version) to very quickly produce a list of pairs containing n and fact(n).\nRemember that small function snd? Should fit right in as your outermost function call, to get rid of the paired state variable.\n\n\nfactorialPairs :: [(Integer, Integer)]\nfactorialPairs = snd $ mapAccumL (\\fn n -&gt; let fn' = n*fn in (fn', (n,fn'))) 1 [1..]\n\n\n\n\n\nDifficult Search Tree Library Glue-ing\nImport Data.Map2 into your program and create a one-liner (or as close as you can make it) to a tree building function:\n2 The standard binary tree implementation. Import it with import qualified Data.Map as M in order to avoid naming conflicts.buildTree :: (Ord k) =&gt; [(k,v)] -&gt; Map k v\nIt should be done by using a fold (list version) with M.insert as its function argument. Look at M.empty as your zero argument. Search for Data.Map on Hoogle3 for more information.\n3 Once you reach Hoogle the page for Data.Map click on Data.Map.Strict to get the full list of available functions."
  },
  {
    "objectID": "03_extra.html#thats-all",
    "href": "03_extra.html#thats-all",
    "title": "3. Finishing Up",
    "section": "That’s All!",
    "text": "That’s All!\nGood luck with your course work!\n\n\n\n\nQuestions and/or Comments?\nShare any thoughts you have about these pages HERE."
  }
]